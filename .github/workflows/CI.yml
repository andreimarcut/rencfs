name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]    
  
jobs:
  check_version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get Cargo.toml version
        id: cargo_version
        run: |
          NEW_VERSION=$(grep '^version =' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "::set-output name=new_version::$NEW_VERSION"
      - name: Check for version change
        id: version_check
        run: |
          git fetch origin main
          OLD_VERSION=$(git show origin/main:Cargo.toml | grep '^version =' | sed 's/version = "\(.*\)"/\1/')
          echo "Old Version: $OLD_VERSION"
          echo "New Version: ${{ steps.cargo_version.outputs.new_version }}"
  
          if [ "$OLD_VERSION" != "${{ steps.cargo_version.outputs.new_version }}" ]; then
            echo "Version has changed from $OLD_VERSION to ${{ steps.cargo_version.outputs.new_version }}"
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Version has not changed"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build_and_test:
    name: Rust
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      
      - name: Install latest Rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build --all --verbose
      
      - name: Check
        uses: actions-rs/cargo@v1
        with:
          command: check --verbose
      
      - name: Tests
        uses: actions-rs/cargo@v1
        with:
          command: test --tests --lib --verbose -- --show-output --nocapture
      - name: Doctests
        uses: actions-rs/cargo@v1
        with:
          command: test --package rencfs --doc --verbose -- --show-output --nocapture
      
  aur:
    name: Pulish to AUR
    runs-on: ubuntu-latest
    needs: [check_version, build_and_test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install latest Rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            override: true
            components: add
      
      - name: Add cargo-aur
        uses: actions-rs/cargo@v1
        with:
          command: add cargo-aur

      - name: cargo-aur
        uses: actions-rs/cargo@v1
        with:
          command: aur
      # - name: Publish AUR package
      #   uses: KSXGitHub/github-actions-deploy-aur@v2.7.1
      #   with:
      #     pkgname: ${{ github.repository }}-bin
      #     pkgbuild: ./target/cargo-aur/PKGBUILD
      #     commit_username: ${{ secrets.AUR_USERNAME }}
      #     commit_email: ${{ secrets.AUR_EMAIL }}
      #     ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
      #     commit_message: Update AUR package
      #     ssh_keyscan_types: rsa,dsa,ecdsa,ed25519
  
  docker:
    name: Pulish to Docker Hub
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    runs-on: ubuntu-latest
    needs: [check_version, build_and_test]
    env:
      # Hostname of your registry
      REGISTRY: docker.io
      REGISTRY_REPO: xorio42
      # Image repository, without hostname and tag
      IMAGE_NAME: ${{ github.repository }}
      IMAGE_TAG: latest
      SHA: ${{ github.event.pull_request.head.sha || github.event.after }}
      PUSH_TYPE: ${{ (github.event_name == 'pull_request' || needs.check_version.outputs.version_changed == 'false') && 'type=cacheonly' || 'type=registry,push=true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: ${{ env.REGISTRY_REPO }}/${{ env.IMAGE_NAME }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - run: echo $PUSH_TYPE

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ env.REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          sbom: true
          provenance: true
          # push: true
          # attests: type=sbom,generator=image
          # For pull requests, export results to the build cache.
          # Otherwise, push to a registry.
          outputs: ${{ (github.event_name == 'pull_request' || needs.rust.outputs.version_changed == 'false') && 'type=cacheonly' || 'type=registry,push=true' }}
