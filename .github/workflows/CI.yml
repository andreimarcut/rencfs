name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]    

env:
  CARGO_TERM_COLOR: always
  
jobs:
  check_version:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.cargo_version.outputs.new_version }}
      version_changed: ${{ steps.version_check.outputs.version_changed }}

    steps:
      - uses: actions/checkout@v4      
        with:
          fetch-depth: 3
      
      - name: Get Cargo.toml version
        id: cargo_version
        run: |
          NEW_VERSION=$(grep '^version =' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Check for version change
        id: version_check
        run: |
          git fetch origin main
          OLD_VERSION=$(git diff HEAD~2 HEAD -- Cargo.toml | grep '^-version =' | sed 's/version = "\(.*\)"/\1/' | tr -d '-')
          OLD_VERSION=${OLD_VERSION:-${{ steps.cargo_version.outputs.version }}}

          echo "Old Version: $OLD_VERSION"
          echo "New Version: ${{ steps.cargo_version.outputs.new_version }}"
  
          if [ "$OLD_VERSION" != "${{ steps.cargo_version.outputs.new_version }}" ]; then
            echo "Version has changed from $OLD_VERSION to ${{ steps.cargo_version.outputs.new_version }}"
            echo "version_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "Version has not changed"
            echo "version_changed=false" >> "$GITHUB_OUTPUT"
          fi
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust nightly
        run: rustup default nightly && rustup update
      
      - name: Check
        run: cargo check
      
      - name: Tests
        run: cargo test
      
  aur_build:
    name: Build AUR
    needs: [check_version, tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install latest Rust nightly
        run: rustup default nightly && rustup update
      
      - name: Install cargo-aur
        run: cargo install cargo-aur

      - name: Run cargo aur
        run: cargo aur
      
      - name: Check for publish
        run: cargo publish --dry-run --allow-dirty

      - name: Upload PKGBUILD artifact
        uses: actions/upload-artifact@v4
        with:
          name: PKGBUILD
          path: ./target/cargo-aur/PKGBUILD

      - name: Upload ${{ github.event.repository.name }}-${{ needs.check_version.outputs.version }}-x86_64.tar.gz artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ needs.check_version.outputs.version }}-x86_64.tar.gz
          path: ./target/cargo-aur/${{ github.event.repository.name }}-${{ needs.check_version.outputs.version }}-x86_64.tar.gz
          
  create_release:
    name: Create release
    if: needs.check_version.outputs.version_changed == 'true' && github.event_name == 'push'
    needs: [check_version, aur_build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ needs.check_version.outputs.version }}-x86_64.tar.gz

      - uses: ncipollo/release-action@v1
        name: Create release
        with:
          name: Release v${{ needs.check_version.outputs.version }}
          tag: v${{ needs.check_version.outputs.version }}
          artifacts: "${{ github.event.repository.name }}-${{ needs.check_version.outputs.version }}-x86_64.tar.gz"
          generateReleaseNotes: true

  aur_publish:
    name: Publish to AUR
    needs: [create_release]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: PKGBUILD

      - name: Publish AUR package
        uses: KSXGitHub/github-actions-deploy-aur@v2.7.1
        with:
          pkgname: ${{ github.event.repository.name }}-bin
          pkgbuild: PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update AUR package
          ssh_keyscan_types: rsa,dsa,ecdsa,ed25519

  cargo_publish:
    name: Publish to crates
    needs: [create_release]
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4

        - name: Install latest Rust nightly
          run: rustup default nightly && rustup update

        - name: Publish
          run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
                  
  docker:
    name: Docker
    needs: [check_version, tests]
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    runs-on: ubuntu-latest
    env:
      # Hostname of your registry
      REGISTRY: docker.io
      REGISTRY_REPO: xorio42
      # Image repository, without hostname and tag
      IMAGE_NAME: ${{ github.event.repository.name }}-${{ needs.check_version.outputs.version }}-x86_64.tar.gz
      IMAGE_TAG: latest
      SHA: ${{ github.event.pull_request.head.sha || github.event.after }}
      BUILD_TYPE: ${{ (github.event_name == 'pull_request' || needs.check_version.outputs.version_changed == 'false') && 'type=cacheonly' || 'type=registry,push=true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - run: echo "Build type $BUILD_TYPE"

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ env.REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          sbom: true
          provenance: true
          # For pull requests, export results to the build cache.
          # Otherwise, push to a registry.
          outputs: ${{ env.BUILD_TYPE }}
