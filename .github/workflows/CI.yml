name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]    
  
jobs:
  job1:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
    steps:
      - id: step1
        run: echo "test=hello" >> "$GITHUB_OUTPUT"
      - id: step2
        run: echo "test=world" >> "$GITHUB_OUTPUT"
  job2:
    runs-on: ubuntu-latest
    needs: job1
    steps:
      - env:
          OUTPUT1: ${{needs.job1.outputs.output1}}
          OUTPUT2: ${{needs.job1.outputs.output2}}
        run: echo "$OUTPUT1 $OUTPUT2"
        
  check_version:
    name: Check version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 3
          
      - name: Get Cargo.toml version
        id: cargo_version
        run: |
          NEW_VERSION=$(grep '^version =' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Check for version change
        id: version_check
        run: |
          git fetch origin main
          OLD_VERSION=$(git diff HEAD~2 HEAD -- Cargo.toml | grep '^\-version =' | sed 's/version = "\(.*\)"/\1/' | tr -d '-')
          OLD_VERSION=${OLD_VERSION:-${{ steps.cargo_version.outputs.new_version }}}

          echo "Old Version: $OLD_VERSION"
          echo "New Version: ${{ steps.cargo_version.outputs.new_version }}"
  
          if [ "$OLD_VERSION" != "${{ steps.cargo_version.outputs.new_version }}" ]; then
            echo "Version has changed from $OLD_VERSION to ${{ steps.cargo_version.outputs.new_version }}"
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Version has not changed"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build_and_test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      
      # - name: Install latest Rust
      #   uses: actions-rs/toolchain@v1
      #   with:
      #       toolchain: nightly
      #       override: true

      # - name: Build
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: build
      
      # - name: Check
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: check
      
      # - name: Tests
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: test
      
  aur_build:
    name: AUR
    needs: [check_version, build_and_test]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.check_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - run: echo ${{ needs.check_version.outputs.version }}
      
      - name: Install latest Rust nightly
        run: rustup default nightly && rustup update
      
      - name: Install cargo-aur
        run: cargo install cargo-aur

      - name: Run cargo aur
        run: cargo aur
      
      - name: Upload PKGBUILD artifact
        uses: actions/upload-artifact@v3
        with:
          name: PKGBUILD
          path: ./target/cargo-aur/PKGBUILD

      - name: Upload ${{ github.repository }}-${{ needs.check_version.outputs.version }}-x86_64.tar.gz artifact
        uses: actions/upload-artifact@v3
        with:
          name: PKGBUILD
          path: ./target/cargo-aur/${{ github.repository }}-${{ needs.check_version.outputs.version }}-x86_64.tar.gz artifact
          
  create_release:
    name: Create a new release
    if: needs.check_version.outputs.version_changed == 'true' && github.event_name == 'push'
    needs: [check_version, aur_build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
           fetch-tags: true
    
      - name: Generate Changelog
        id: generate_changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=-creatordate | sed -n 2p)
          CURRENT_TAG=v$VERSION
          REPO_URL=https://github.com/${{ github.repository }}
          COMPARE_URL="$REPO_URL/compare/$PREVIOUS_TAG...$CURRENT_TAG"

          # Generate the changelog content
          CHANGELOG="Full Changelog: [$PREVIOUS_TAG...$CURRENT_TAG]($COMPARE_URL)"
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check_version.outputs.version }}
          release_name: Release v${{ needs.check_version.outputs.version }}
          body: |
            ${{ steps.generate_changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.repository }}-${{ needs.check_version.outputs.version }}-x86_64.tar.gz

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/cargo-aur/${{ github.repository }}-${{ needs.check_version.outputs.version }}-x86_64.tar.gz
          asset_name: ${{ github.repository }}-${{ needs.check_version.outputs.version }}-x86_64.tar.gz
          asset_content_type: application/gzip    

  aur_publish:
    name: Publish to AUR
    needs: [create_release]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: PKGBUILD

      - name: Publish AUR package
        uses: KSXGitHub/github-actions-deploy-aur@v2.7.1
        with:
          pkgname: ${{ github.repository }}-bin
          pkgbuild: PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update AUR package
          ssh_keyscan_types: rsa,dsa,ecdsa,ed25519

  cargo_publish:
    name: Publish to cargo
    needs: [create_release]
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - uses: actions-rs/toolchain@v1
          with:
              toolchain: stable
              override: true
        - uses: katyo/publish-crates@v2
          with:
              registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          
  docker:
    name: Docker
    needs: [check_version, build_and_test]
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    runs-on: ubuntu-latest
    env:
      # Hostname of your registry
      REGISTRY: docker.io
      REGISTRY_REPO: xorio42
      # Image repository, without hostname and tag
      IMAGE_NAME: ${{ github.repository }}
      IMAGE_TAG: latest
      SHA: ${{ github.event.pull_request.head.sha || github.event.after }}
      PUSH_TYPE: ${{ (github.event_name == 'pull_request' || needs.check_version.outputs.version_changed == 'false') && 'type=cacheonly' || 'type=registry,push=true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: ${{ env.REGISTRY_REPO }}/${{ env.IMAGE_NAME }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - run: echo $PUSH_TYPE

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ env.REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          sbom: true
          provenance: true
          # push: true
          # attests: type=sbom,generator=image
          # For pull requests, export results to the build cache.
          # Otherwise, push to a registry.
          outputs: ${{ (github.event_name == 'pull_request' || needs.rust.outputs.version_changed == 'false') && 'type=cacheonly' || 'type=registry,push=true' }}
