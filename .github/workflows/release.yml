name: Release

on:
  # release:
  #   types: [published]
  push:
    branches: [ "main" ]
    
env:
  # Hostname of your registry
  REGISTRY: docker.io
  # Image repository, without hostname and tag
  IMAGE_NAME: ${{ github.repository }}
  SHA: ${{ github.event.pull_request.head.sha || github.event.after }}
  
jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     pull-requests: write

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         ref: ${{ env.SHA }}

  #     - name: Setup Docker buildx
  #       uses: docker/setup-buildx-action@v3

  #     # Authenticate to the container registry
  #     - name: Authenticate to registry ${{ env.REGISTRY }}
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     # Extract metadata (tags, labels) for Docker
  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: xorio42/rencfs
  #         labels: |
  #           org.opencontainers.image.revision=${{ env.SHA }}
  #         tags: |
  #           type=edge,branch=$repo.default_branch
  #           type=semver,pattern=v{{version}}
  #           type=sha,prefix=,suffix=,format=short 

  #     # Build and push Docker image with Buildx
  #     # (don't push on PR, load instead)
  #     - name: Build and push Docker image
  #       id: build-and-push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         sbom: ${{ github.event_name != 'pull_request' }}
  #         provenance: ${{ github.event_name != 'pull_request' }}
  #         push: ${{ github.event_name != 'pull_request' }}
  #         load: ${{ github.event_name == 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "xorio42/rencfs"
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: xorio42/rencfs:latest
          # For pull requests, export results to the build cache.
          # Otherwise, push to a registry.
          outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry,push=true' }}
      - name: Attest
        uses: actions/attest-build-provenance@v1
        id: attest
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
          
  # push_to_gh_registry:
  #   name: Push Docker image to GitHub Container registry
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     packages: write
  #     contents: read
  #     attestations: write
  #   env:
  #     REGISTRY: ghcr.io
  #     IMAGE_NAME: ${{ github.repository }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build and push image
  #       id: push
  #       uses: docker/build-push-action@v5.0.0
  #       with:
  #         context: .
  #         push: true
  #         tags: xorio42/rencfs:latest
  #     - name: Attest
  #       uses: actions/attest-build-provenance@v1
  #       id: attest
  #       with:
  #         subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         subject-digest: ${{ steps.push.outputs.digest }}
  #         push-to-registry: true          
          
  # push_to_registry:
  #   name: Push Docker image to Docker Hub
  #   runs-on: ubuntu-latest
  #   permissions:
  #     packages: write
  #     contents: read
  #     attestations: write
  #     id-token: write
  #   env:
  #     REGISTRY: docker.io
  #     IMAGE_NAME: ${{ github.repository }}

  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v4

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Extract metadata (tags, labels) for Docker
  #       id: meta
  #       uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
  #       with:
  #         images: xorio42/rencfs

  #     - name: Build and push Docker image
  #       id: push
  #       uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         push: true
  #         # tags: ${{ steps.meta.outputs.tags }}
  #         tags: latest
  #         labels: ${{ steps.meta.outputs.labels }}

  #     - name: Attest
  #       uses: actions/attest-build-provenance@v1
  #       id: attest
  #       with:
  #         subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         subject-digest: ${{ steps.push.outputs.digest }}
  #         push-to-registry: true

  # build_and_attest_ghcr:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     packages: write
  #     contents: read
  #     attestations: write
  #   env:
  #     REGISTRY: ghcr.io
  #     IMAGE_NAME: ${{ github.repository }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build and push image
  #       id: push
  #       uses: docker/build-push-action@v5.0.0
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
  #     - name: Attest
  #       uses: actions/attest-build-provenance@v1
  #       id: attest
  #       with:
  #         subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         subject-digest: ${{ steps.push.outputs.digest }}
  #         push-to-registry: true

  # build_and_attest_dh:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     packages: write
  #     contents: read
  #     attestations: write
  #   env:
  #     REGISTRY: docker.io
  #     IMAGE_NAME: ${{ github.repository }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Build and push image
  #       id: push
  #       uses: docker/build-push-action@v5.0.0
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
  #     - name: Attest
  #       uses: actions/attest-build-provenance@v1
  #       id: attest
  #       with:
  #         subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         subject-digest: ${{ steps.push.outputs.digest }}
  #         push-to-registry: true
